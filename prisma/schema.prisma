// =============================================================
//               STAFF CONTROL SYSTEM PRISMA SCHEMA
// =============================================================

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// =============================================================
//                      CORE MODELS
// =============================================================

model User {
  id             Int    @id @default(autoincrement())
  name           String
  username       String @unique
  password       String
  organizationId Int?   @map("organization_id")
  departmentId   Int?   @map("department_id")
  role           Role

  // --- Standard Fields ---
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)

  organization    Organization?   @relation(fields: [organizationId], references: [id])
  department      Department?     @relation(fields: [departmentId], references: [id])
  createdVisitors Visitor[]       @relation("CreatedVisitors")
  changeHistories ChangeHistory[]

  @@map("users")
}

model Organization {
  id                Int     @id @default(autoincrement())
  fullName          String  @map("full_name")
  shortName         String  @unique @map("short_name")
  address           String?
  phone             String?
  email             String?
  logo              String?
  additionalDetails String? @map("additional_details")

  // --- Standard Fields ---
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)

  users       User[]
  departments Department[]

  @@map("organizations")
}

model Department {
  id                Int     @id @default(autoincrement())
  organizationId    Int     @map("organization_id")
  parentId          Int?    @map("parent_id")
  fullName          String  @map("full_name")
  shortName         String  @map("short_name")
  address           String?
  phone             String?
  email             String?
  additionalDetails String? @map("additional_details")

  // --- Standard Fields ---
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)

  organization Organization @relation(fields: [organizationId], references: [id])
  parent       Department?  @relation("DepartmentHierarchy", fields: [parentId], references: [id])
  children     Department[] @relation("DepartmentHierarchy")
  users        User[]
  employees    Employee[]

  @@map("departments")
}

model Employee {
  id                Int     @id @default(autoincrement())
  departmentId      Int     @map("department_id")
  policyId          Int?    @map("policy_id")
  name              String
  address           String?
  phone             String?
  email             String?
  photo             String?
  additionalDetails String? @map("additional_details")

  // --- Standard Fields ---
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)

  department    Department     @relation(fields: [departmentId], references: [id])
  policy        Policy?        @relation(fields: [policyId], references: [id])
  credentials   Credential[]
  computerUsers ComputerUser[]
  actions       Action[]

  @@map("employees")
}

model Credential {
  id                Int        @id @default(autoincrement())
  employeeId        Int        @map("employee_id")
  code              String
  type              ActionType
  additionalDetails String?    @map("additional_details")

  // --- Standard Fields ---
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)

  employee Employee @relation(fields: [employeeId], references: [id])

  @@map("credentials")
}

// =============================================================
//               AGENT & COMPUTER MONITORING MODELS
// =============================================================

model ComputerUser {
  id         Int     @id @default(autoincrement())
  employeeId Int     @map("employee_id")
  sid        String  @unique
  name       String
  domain     String?
  username   String
  isAdmin    Boolean @default(false) @map("is_admin")
  isInDomain Boolean @default(false) @map("is_in_domain")

  // --- Standard Fields ---
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)

  employee         Employee           @relation(fields: [employeeId], references: [id])
  usersOnComputers UsersOnComputers[]

  @@map("computer_users")
}

model Computer {
  id          Int     @id @default(autoincrement())
  computerUid String  @unique @map("computer_uid")
  os          String?
  ipAddress   String? @map("ip_address")
  macAddress  String? @map("mac_address")

  // --- Standard Fields ---
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)

  usersOnComputers UsersOnComputers[]

  @@map("computers")
}

model UsersOnComputers {
  id             Int @id @default(autoincrement())
  computerUserId Int @map("computer_user_id")
  computerId     Int @map("computer_id")

  // --- Standard Fields ---
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)

  computerUser  ComputerUser   @relation(fields: [computerUserId], references: [id])
  computer      Computer       @relation(fields: [computerId], references: [id])
  activeWindows ActiveWindow[]
  visitedSites  VisitedSite[]
  screenshots   Screenshot[]
  userSessions  UserSession[]

  @@map("users_on_computers")
}

model ActiveWindow {
  id                 Int      @id @default(autoincrement())
  usersOnComputersId Int      @map("users_on_computers_id")
  datetime           DateTime
  title              String
  processName        String   @map("process_name")
  icon               String?
  activeTime         Int      @map("active_time") // in seconds
  createdAt          DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  usersOnComputers UsersOnComputers @relation(fields: [usersOnComputersId], references: [id])

  @@map("active_windows")
}

model VisitedSite {
  id                 Int      @id @default(autoincrement())
  usersOnComputersId Int      @map("users_on_computers_id")
  datetime           DateTime
  title              String?
  url                String
  processName        String   @map("process_name")
  icon               String?
  activeTime         Int      @map("active_time") // in seconds
  createdAt          DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  usersOnComputers UsersOnComputers @relation(fields: [usersOnComputersId], references: [id])

  @@map("visited_sites")
}

model Screenshot {
  id                 Int      @id @default(autoincrement())
  usersOnComputersId Int      @map("users_on_computers_id")
  datetime           DateTime
  title              String?
  filePath           String   @map("file_path")
  processName        String   @map("process_name")
  icon               String?
  createdAt          DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  usersOnComputers UsersOnComputers @relation(fields: [usersOnComputersId], references: [id])

  @@map("screenshots")
}

model UserSession {
  id                 Int         @id @default(autoincrement())
  usersOnComputersId Int         @map("users_on_computers_id")
  startTime          DateTime    @map("start_time")
  endTime            DateTime?   @map("end_time")
  sessionType        SessionType @map("session_type")

  usersOnComputers UsersOnComputers @relation(fields: [usersOnComputersId], references: [id])

  @@map("user_sessions")
}

// =============================================================
//                      ENTRY & DEVICE MODELS
// =============================================================

model Action {
  id           Int         @id @default(autoincrement())
  deviceId     Int?        @map("device_id")
  gateId       Int?        @map("gate_id")
  actionTime   DateTime    @map("action_time")
  employeeId   Int?        @map("employee_id")
  visitorId    Int?        @map("visitor_id")
  visitorType  VisitorType
  entryType    EntryType
  actionType   ActionType
  actionResult String?     @map("action_result")
  actionMode   ActionMode

  device   Device?   @relation(fields: [deviceId], references: [id])
  gate     Gate?     @relation(fields: [gateId], references: [id])
  employee Employee? @relation(fields: [employeeId], references: [id])
  visitor  Visitor?  @relation(fields: [visitorId], references: [id])

  @@map("actions")
}

model Gate {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  devices Device[]
  actions Action[]

  @@map("gates")
}

model Device {
  id               Int          @id @default(autoincrement())
  gateId           Int          @map("gate_id")
  name             String
  entryType        EntryType    @map("entry_type")
  ipAddress        String       @map("ip_address")
  login            String?
  password         String?
  welcomeText      String?      @map("welcome_text")
  welcomeTextType  WelcomeText  @map("welcome_text_type")
  welcomePhoto     String?      @map("welcome_photo")
  welcomePhotoType WelcomePhoto @map("welcome_photo_type")

  // --- Standard Fields ---
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)

  gate    Gate     @relation(fields: [gateId], references: [id])
  actions Action[]

  @@map("devices")
}

// =============================================================
//                      POLICY MODELS
// =============================================================

model ScreenshotOption {
  id               Int     @id @default(autoincrement())
  interval         Int     @default(60)
  isGrayscale      Boolean @default(false) @map("is_grayscale")
  captureAllWindow Boolean @default(false) @map("capture_all_window")

  policies Policy[]

  @@map("screenshot_options")
}

model VisitedSitesOption {
  id                     Int  @id @default(autoincrement())
  usefulWebsiteGroupId   Int? @map("useful_website_group_id")
  unusefulWebsiteGroupId Int? @map("unuseful_website_group_id")

  usefulGroup   WebsiteGroup? @relation("UsefulWebsiteGroups", fields: [usefulWebsiteGroupId], references: [id])
  unusefulGroup WebsiteGroup? @relation("UnusefulWebsiteGroups", fields: [unusefulWebsiteGroupId], references: [id])
  policies      Policy[]

  @@map("visited_sites_options")
}

model ActiveWindowsOption {
  id                 Int  @id @default(autoincrement())
  usefulAppGroupId   Int? @map("useful_app_group_id")
  unusefulAppGroupId Int? @map("unuseful_app_group_id")

  usefulGroup   AppGroup? @relation("UsefulAppGroups", fields: [usefulAppGroupId], references: [id])
  unusefulGroup AppGroup? @relation("UnusefulAppGroups", fields: [unusefulAppGroupId], references: [id])
  policies      Policy[]

  @@map("active_windows_options")
}

model Policy {
  id                     Int     @id @default(autoincrement())
  title                  String
  activeWindow           Boolean @default(true) @map("active_window")
  screenshot             Boolean @default(true)
  visitedSites           Boolean @default(true) @map("visited_sites")
  screenshotOptionsId    Int?    @map("screenshot_options_id")
  visitedSitesOptionsId  Int?    @map("visited_sites_options_id")
  activeWindowsOptionsId Int?    @map("active_windows_options_id")

  // --- Standard Fields ---
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)

  screenshotOptions    ScreenshotOption?    @relation(fields: [screenshotOptionsId], references: [id])
  visitedSitesOptions  VisitedSitesOption?  @relation(fields: [visitedSitesOptionsId], references: [id])
  activeWindowsOptions ActiveWindowsOption? @relation(fields: [activeWindowsOptionsId], references: [id])
  employees            Employee[]

  @@map("policies")
}

model Website {
  id        Int      @id @default(autoincrement())
  url       String   @unique
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  groups WebsitesInGroups[]

  @@map("websites")
}

model WebsiteGroup {
  id        Int       @id @default(autoincrement())
  title     String
  groupType GroupType @map("group_type")

  // --- Standard Fields ---
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)

  websites          WebsitesInGroups[]
  usefulInOptions   VisitedSitesOption[] @relation("UsefulWebsiteGroups")
  unusefulInOptions VisitedSitesOption[] @relation("UnusefulWebsiteGroups")

  @@map("website_groups")
}

model WebsitesInGroups {
  websiteId Int      @map("website_id")
  groupId   Int      @map("group_id")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  website Website      @relation(fields: [websiteId], references: [id])
  group   WebsiteGroup @relation(fields: [groupId], references: [id])

  @@id([websiteId, groupId])
  @@map("websites_in_groups")
}

model App {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  groups AppsInGroups[]

  @@map("apps")
}

model AppGroup {
  id        Int       @id @default(autoincrement())
  title     String
  groupType GroupType @map("group_type")

  // --- Standard Fields ---
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(3)

  apps              AppsInGroups[]
  usefulInOptions   ActiveWindowsOption[] @relation("UsefulAppGroups")
  unusefulInOptions ActiveWindowsOption[] @relation("UnusefulAppGroups")

  @@map("app_groups")
}

model AppsInGroups {
  appId     Int      @map("app_id")
  groupId   Int      @map("group_id")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  app   App      @relation(fields: [appId], references: [id])
  group AppGroup @relation(fields: [groupId], references: [id])

  @@id([appId, groupId])
  @@map("apps_in_groups")
}

// =============================================================
//                      VISITOR MODELS
// =============================================================

model Visitor {
  id                Int      @id @default(autoincrement())
  firstName         String   @map("first_name")
  lastName          String   @map("last_name")
  middleName        String?  @map("middle_name")
  birthday          String?
  phone             String?
  passportNumber    String?  @map("passport_number")
  pinfl             String?
  workPlace         String?  @map("work_place")
  additionalDetails String?  @map("additional_details")
  creatorId         Int      @map("creator_id")
  createdAt         DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  creator      User          @relation("CreatedVisitors", fields: [creatorId], references: [id])
  onetimeCodes OnetimeCode[]
  actions      Action[]

  @@map("visitors")
}

model OnetimeCode {
  id                Int             @id @default(autoincrement())
  visitorId         Int             @map("visitor_id")
  codeType          VisitorCodeType @map("code_type")
  code              String
  additionalDetails String?         @map("additional_details")
  startDate         DateTime        @map("start_date")
  endDate           DateTime        @map("end_date")

  // --- Standard Fields ---
  isActive  Boolean  @default(true) @map("is_active")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  visitor Visitor @relation(fields: [visitorId], references: [id])

  @@map("onetime_codes")
}

// =============================================================
//                      LOGGING & HISTORY
// =============================================================

model ChangeHistory {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  tableName String   @map("table_name")
  fieldName String   @map("field_name")
  oldValue  String?  @map("old_value")
  newValue  String?  @map("new_value")
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(3)

  user User @relation(fields: [userId], references: [id])

  @@map("change_histories")
}

// =============================================================
//                         ENUMERATIONS
// =============================================================

enum Role {
  ADMIN
  HR
  DEPARTMENT_LEAD
  GUARD
}

enum EntryType {
  ENTER
  EXIT
  BOTH
}

enum ActionType {
  PHOTO
  CARD
  CAR
  QR
  PERSONAL_CODE
  ONE_TIME_ID
  USER
}

enum WelcomeText {
  NO_TEXT
  CUSTOM_TEXT
  EMPLOYEE_NAME
}

enum WelcomePhoto {
  NO_PHOTO
  CUSTOM_PHOTO
  EMPLOYEE_PHOTO
}

enum VisitorType {
  EMPLOYEE
  VISITOR
}

enum ActionMode {
  ONLINE
  OFFLINE
}

enum SessionType {
  UNLOCKED
  LOCKED
  LOGIN
  LOGOUT
}

enum GroupType {
  USEFUL
  UNUSEFUL
}

enum VisitorCodeType {
  ONETIME
  MULTIPLE
}
